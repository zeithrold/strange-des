declare const EMPTY_BYTE: number[];
declare const PC_1_TABLE: number[];
declare const PC_2_TABLE: number[];
declare const INITIAL_PERMUTATION_TABLE: number[];
declare const FINAL_PERMUTATION_TABLE: number[];
declare const EXPAND_PERMUTATION_TABLE: number[];
declare const S_BOX_TABLE: number[][][];
declare const P_BOX_TABLE: number[];
declare const MOVE_UNUSUAL_LOOP_TIME: number[];
declare const MOVE_UNUSUAL_LOOP_AMOUNT = 1;
declare const MOVE_USUAL_LOOP_AMOUNT = 2;
declare function encrypt(src: string, keys: string[]): string;
declare function _encrypt(srcByte: number[], keyByte: number[]): number[];
declare function xor(srcByte: number[], keyByte: number[]): number[];
declare function keychain(keyByte: number[]): number[][];
declare function tableConvert(src: number[], table: number[]): number[];
declare function sBoxGroupConvert(src: number[]): number[];
declare function sBoxConvert(src: number[], boxNo: number): number[];
declare function moveByte(byte: number[], amount: number): number[];
declare function byteToHex(byte: number[]): string;
declare function stringToByteGroup(src: string, callback: (byte: number[]) => void): void;
declare function stringToByte(src: string): number[];
declare function stringToByteWithFill(src: string): number[];
declare function decimalToBinary(decimal: number, length: number): number[];
export { EMPTY_BYTE, PC_1_TABLE, PC_2_TABLE, INITIAL_PERMUTATION_TABLE, FINAL_PERMUTATION_TABLE, EXPAND_PERMUTATION_TABLE, S_BOX_TABLE, P_BOX_TABLE, MOVE_UNUSUAL_LOOP_AMOUNT, MOVE_UNUSUAL_LOOP_TIME, MOVE_USUAL_LOOP_AMOUNT, encrypt, _encrypt, xor, keychain, tableConvert, sBoxConvert, sBoxGroupConvert, moveByte, byteToHex, stringToByte, stringToByteWithFill, stringToByteGroup, decimalToBinary };
